Biblioth√®que Python ‚Äî Gestion de livres (CSV / Pickle)

Ce d√©p√¥t contient un mini-projet de gestion de biblioth√®que (livres papier et num√©riques), avec persistance **CSV** et **Pickle**, une API objet simple et une suite de tests **pytest**.

## Fonctionnalit√©s
- Gestion de livres (papier & num√©riques) via `src.models` (classes `Livre`, `LivreNumerique`, `Bibliotheque`).
- Persistance CSV & Pickle via `src.file_manager.BibliothequeAvecFichier` (m√©thodes `sauvegarder_csv`, `charger_csv`, `sauvegarder_pickle`, `charger_pickle`).
- Exceptions d√©di√©es dans `src.exceptions` (`ErreurBibliotheque`, `FichierIntrouvableErreur`, `FichierInvalideErreur`).
- Tests `pytest` configur√©s via `pyproject.toml` avec fixtures dans `tests/conftest.py`.

## üóÇÔ∏è Arborescence (principale)

```
nouveau_PythonB2_updated/
  nouveau_PythonB2_updated/

```

>  D‚Äôautres dossiers d‚Äôexercices sont pr√©sents (`exercices 1`, `exercices 2`, etc.) mais la logique principale exploitable se trouve dans **`Tp biblio\Tp_biblio_final\src`** et les tests dans **`tests/`**.

##  Prise en main

### 1 Cr√©er et activer un environnement virtuel
**Windows (cmd):**
```bat
cd nouveau_PythonB2_updated\nouveau_PythonB2_updated
python -m venv .venv
.\.venv\Scripts\activate.bat
```

**macOS / Linux:**
```bash
cd nouveau_PythonB2_updated/ nouveau_PythonB2_updated
python3 -m venv .venv
source .venv/bin/activate
```

### 2 Installer les d√©pendances
Si le fichier `requirements.txt` est pr√©sent √† la racine interne:
```bash
pip install -r requirements.txt
```
Sinon, installez √† minima :
```bash
pip install pytest pandas==2.3.3 flask
```

### 3 Lancer les tests
```bash
pytest -q
```
Si votre shell ne se trouve pas dans le dossier qui contient `tests/`, ciblez-le explicitement :
```bash
pytest -q tests
```

### 4 Couverture de code (facultatif)
```bash
pip install pytest-cov
pytest tests --cov="Tp biblio\Tp_biblio_final\src" --cov-report=term-missing
# Rapport HTML :
pytest tests --cov="Tp biblio\Tp_biblio_final\src" --cov-report=html
# Puis ouvrez htmlcov/index.html
```

## üß© API ‚Äî Classes principales

### `src.models`
- **`Livre(titre: str, auteur: str, isbm: str)`**  
  Repr√©sente un livre.  
  - `infos() -> str`: retourne une cha√Æne lisible `"Titre √©crit par Auteur ISBN : isbm"`.

- **`LivreNumerique(Livre)`**  
  Ajoute l‚Äôattribut `taille_fichier: float`.

- **`Bibliotheque(nom: str)`**  
  - `ajouter_livre(livre) -> bool`: ajoute un livre (l‚Äô**ISBN** doit √™tre unique). En cas de doublon, l√®ve `ErreurBibliotheque` avec `code_erreur=1001`.
  - `supprimer_livre(isbm: str) -> None`: supprime par ISBN (silencieux si l‚ÄôISBN n‚Äôexiste pas).
  - `__len__() -> int`: nombre de livres.
  - `recherche_par_titre(titre: str) -> list[Livre]`
  - `recherche_par_auteur(auteur: str) -> list[Livre]`
  - `afficher_livres() -> str`: affiche l‚Äô√©tat de la biblioth√®que (message d√©di√© si vide).

>  **Note:** le champ est nomm√© `isbm` dans le code (et non `isbn`). Les tests et la persistance utilisent la m√™me orthographe.

### `src.file_manager`
- **`BibliothequeAvecFichier(Bibliotheque)`**  
  - `sauvegarder_csv(chemin_fichier: str)` : √©crit les colonnes `Titre, Auteur, ISBN, TailleFichier`.
  - `charger_csv(chemin_fichier: str)` : recharge les livres √† partir d‚Äôun CSV ; l√®ve `FichierIntrouvableErreur` si le fichier n‚Äôexiste pas et `FichierInvalideErreur` si le contenu est incorrect.
  - `sauvegarder_pickle(chemin_fichier: str)` / `charger_pickle(chemin_fichier: str)` : s√©rialisation/chargement via `pickle` avec la m√™me gestion d‚Äôerreurs.

### `src.exceptions`
- `ErreurBibliotheque(message: str, code_erreur: int = 0)`
- `FichierIntrouvableErreur(ErreurBibliotheque)`
- `FichierInvalideErreur(ErreurBibliotheque)`

##  Ex√©cuter la d√©mo (script principal)

Un script de d√©monstration est fourni :
```bash
python "Tp biblio\Tp_biblio_final\src\main.py"
```
Il instancie une biblioth√®que, ajoute des livres, illustre les recherches et la persistance.

##  Tests & organisation

- Les tests vivent dans **`tests/`** et `pyproject.toml` configure `pytest` (patterns des fichiers/ fonctions de test).
- `tests/conftest.py` pr√©pare le `PYTHONPATH` pour que les imports `from src...` fonctionnent.
- Pour n‚Äôex√©cuter qu‚Äôun seul test/fichier :
  ```bash
  pytest -q tests/test_models.py
  pytest -q tests/test_file_io.py::test_sauvegarde_et_rechargement_csv
  ```
